#include <stdio.h>

typedef long double N;

#define P (probs[0][1])
#define _P (probs[1][0])

static N
calc_two_ahead_prob(N p)
{
	int i;
	N ini, tomul, sum;

	ini = p*p;
	tomul = 2*p*(1-p);
	sum = ini;

	while((ini=ini*tomul) > 1e-12)
		sum += ini;
	return sum;
}

/* static N
_calc_game_prob(N p, N ahp)
{
	N probs[4][4], p0_4, p1_4, p2_4;
	int i, j;

	P = p;
	_P = 1.L-p;

	probs[0][2] = probs[0][1] * P;
	probs[0][3] = probs[0][2] * P;
	probs[2][0] = probs[1][0] * _P;
	probs[3][0] = probs[2][0] * _P;
	for(j=1; j<4; j++)
		for(i=1; i<4; i++)
			probs[j][i] = probs[j][i-1] * P + probs[j-1][i] * _P;

	p0_4 = probs[0][3] * P;
	p1_4 = probs[1][3] * P;
	p2_4 = probs[2][3] * P;

	return p0_4 + p1_4 + p2_4 + probs[3][3]*ahp;
} */

static N
calc_game_prob(N p, N ahp, int npoints)
{
	N probs[npoints][npoints], sum;
	int i, j;

	P = p;
	_P = 1.L-p;

	for(i=2; i<npoints; i++)
		probs[0][i] = probs[0][i-1] * P;
	for(j=2; j<npoints; j++)
		probs[j][0] = probs[j-1][0] * _P;
	for(j=1; j<npoints; j++)
		for(i=1; i<npoints; i++)
			probs[j][i] = probs[j][i-1] * P + probs[j-1][i] * _P;

	sum = 0.L;
	for(j=0; j<npoints-1; j++)
		sum += probs[j][npoints-1] * P;
	printf("winp is %Lf\n", sum);
	sum += probs[npoints-1][npoints-1]*ahp;
	printf("evenp is %Lf\n", probs[npoints-1][npoints-1]);

	return sum;
}

static N
calc_set_prob(N g, N tie_break)
{
	return 0.L;
}

int
main()
{
	N p, g, s, ahp;

	scanf("%Lf", &p);

	ahp = calc_two_ahead_prob(p);
	g = calc_game_prob(p, ahp, 4);
	s = calc_set_prob(g, calc_game_prob(p, ahp, 7));

	printf("%.11Lf %.11Lf %.11Lf\n", g, s, p);
	return 0;
}
